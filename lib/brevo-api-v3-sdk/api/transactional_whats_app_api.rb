=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module BrevoApiV3Sdk
  class TransactionalWhatsAppApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Set custom user_agent if explicitly passed in api
    # default will still remain Swagger-Codegen/#{VERSION}/ruby
    def setUserAgent(user_agent)
      @user_agent = user_agent
      if user_agent.is_a?(String) && user_agent.downcase.start_with?('brevo_')
        @api_client.default_headers['User-Agent'] = @user_agent
      end
    end
    
    # Get all your WhatsApp activity (unaggregated events)
    # This endpoint will show the unaggregated statistics for WhatsApp activity (30 days by default if `startDate` and `endDate` or `days` is not passed. The date range can not exceed 90 days)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number limitation for the result returned (default to 2500)
    # @option opts [Integer] :offset Beginning point in the list to retrieve from (default to 0)
    # @option opts [String] :start_date **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate 
    # @option opts [String] :end_date **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate 
    # @option opts [Integer] :days Number of days in the past including today (positive integer). _Not compatible with &#39;startDate&#39; and &#39;endDate&#39;_ 
    # @option opts [String] :contact_number Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721)
    # @option opts [String] :event Filter the report for a specific event type
    # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)
    # @return [GetWhatsappEventReport]
    def get_whatsapp_event_report(opts = {})
      data, _status_code, _headers = get_whatsapp_event_report_with_http_info(opts)
      data
    end

    # Get all your WhatsApp activity (unaggregated events)
    # This endpoint will show the unaggregated statistics for WhatsApp activity (30 days by default if &#x60;startDate&#x60; and &#x60;endDate&#x60; or &#x60;days&#x60; is not passed. The date range can not exceed 90 days)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number limitation for the result returned
    # @option opts [Integer] :offset Beginning point in the list to retrieve from
    # @option opts [String] :start_date **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate 
    # @option opts [String] :end_date **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate 
    # @option opts [Integer] :days Number of days in the past including today (positive integer). _Not compatible with &#39;startDate&#39; and &#39;endDate&#39;_ 
    # @option opts [String] :contact_number Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721)
    # @option opts [String] :event Filter the report for a specific event type
    # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
    # @return [Array<(GetWhatsappEventReport, Fixnum, Hash)>] GetWhatsappEventReport data, response status code and response headers
    def get_whatsapp_event_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionalWhatsAppApi.get_whatsapp_event_report ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TransactionalWhatsAppApi.get_whatsapp_event_report, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TransactionalWhatsAppApi.get_whatsapp_event_report, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'event'] && !['sent', 'delivered', 'read', 'error', 'unsubscribe', 'reply', 'soft-bounce'].include?(opts[:'event'])
        fail ArgumentError, 'invalid value for "event", must be one of sent, delivered, read, error, unsubscribe, reply, soft-bounce'
      end
      if @api_client.config.client_side_validation && opts[:'sort'] && !['asc', 'desc'].include?(opts[:'sort'])
        fail ArgumentError, 'invalid value for "sort", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/whatsapp/statistics/events'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'contactNumber'] = opts[:'contact_number'] if !opts[:'contact_number'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetWhatsappEventReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionalWhatsAppApi#get_whatsapp_event_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send a WhatsApp message
    # This endpoint is used to send a WhatsApp message. <br/>(**The first message you send using the API must contain a Template ID. You must create a template on WhatsApp on the Brevo platform to fetch the Template ID.**)
    # @param send_whatsapp_message Values to send WhatsApp message
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2012]
    def send_whatsapp_message(send_whatsapp_message, opts = {})
      data, _status_code, _headers = send_whatsapp_message_with_http_info(send_whatsapp_message, opts)
      data
    end

    # Send a WhatsApp message
    # This endpoint is used to send a WhatsApp message. &lt;br/&gt;(**The first message you send using the API must contain a Template ID. You must create a template on WhatsApp on the Brevo platform to fetch the Template ID.**)
    # @param send_whatsapp_message Values to send WhatsApp message
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def send_whatsapp_message_with_http_info(send_whatsapp_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionalWhatsAppApi.send_whatsapp_message ...'
      end
      # verify the required parameter 'send_whatsapp_message' is set
      if @api_client.config.client_side_validation && send_whatsapp_message.nil?
        fail ArgumentError, "Missing the required parameter 'send_whatsapp_message' when calling TransactionalWhatsAppApi.send_whatsapp_message"
      end
      # resource path
      local_var_path = '/whatsapp/sendMessage'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(send_whatsapp_message)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionalWhatsAppApi#send_whatsapp_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
