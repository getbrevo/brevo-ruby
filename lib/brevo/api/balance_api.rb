=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module Brevo
  class BalanceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create new transaction
    # Creates new transaction and returns information
    # @param pid Loyalty Program Id
    # @param body Transaction Payload
    # @param [Hash] opts the optional parameters
    # @return [Transaction]
    def begin_transaction(pid, body, opts = {})
      data, _status_code, _headers = begin_transaction_with_http_info(pid, body, opts)
      data
    end

    # Create new transaction
    # Creates new transaction and returns information
    # @param pid Loyalty Program Id
    # @param body Transaction Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def begin_transaction_with_http_info(pid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.begin_transaction ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.begin_transaction"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BalanceApi.begin_transaction"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/transactions'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#begin_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel transaction
    # Cancels transaction
    # @param pid Loyalty Program Id
    # @param tid Transaction Id
    # @param [Hash] opts the optional parameters
    # @return [Transaction]
    def cancel_transaction(pid, tid, opts = {})
      data, _status_code, _headers = cancel_transaction_with_http_info(pid, tid, opts)
      data
    end

    # Cancel transaction
    # Cancels transaction
    # @param pid Loyalty Program Id
    # @param tid Transaction Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def cancel_transaction_with_http_info(pid, tid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.cancel_transaction ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.cancel_transaction"
      end
      # verify the required parameter 'tid' is set
      if @api_client.config.client_side_validation && tid.nil?
        fail ArgumentError, "Missing the required parameter 'tid' when calling BalanceApi.cancel_transaction"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/transactions/{tid}/cancel'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'tid' + '}', tid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#cancel_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Complete transaction
    # Completes transaction
    # @param pid Loyalty Program Id
    # @param tid Transaction Id
    # @param [Hash] opts the optional parameters
    # @return [Transaction]
    def complete_transaction(pid, tid, opts = {})
      data, _status_code, _headers = complete_transaction_with_http_info(pid, tid, opts)
      data
    end

    # Complete transaction
    # Completes transaction
    # @param pid Loyalty Program Id
    # @param tid Transaction Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def complete_transaction_with_http_info(pid, tid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.complete_transaction ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.complete_transaction"
      end
      # verify the required parameter 'tid' is set
      if @api_client.config.client_side_validation && tid.nil?
        fail ArgumentError, "Missing the required parameter 'tid' when calling BalanceApi.complete_transaction"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/transactions/{tid}/complete'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'tid' + '}', tid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#complete_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create balance limits
    # Creates balance limit and sends the created UUID along with the data
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param body Balance Definition Payload
    # @param [Hash] opts the optional parameters
    # @return [BalanceLimit]
    def create_balance_limit(pid, bdid, body, opts = {})
      data, _status_code, _headers = create_balance_limit_with_http_info(pid, bdid, body, opts)
      data
    end

    # Create balance limits
    # Creates balance limit and sends the created UUID along with the data
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param body Balance Definition Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalanceLimit, Fixnum, Hash)>] BalanceLimit data, response status code and response headers
    def create_balance_limit_with_http_info(pid, bdid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.create_balance_limit ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.create_balance_limit"
      end
      # verify the required parameter 'bdid' is set
      if @api_client.config.client_side_validation && bdid.nil?
        fail ArgumentError, "Missing the required parameter 'bdid' when calling BalanceApi.create_balance_limit"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BalanceApi.create_balance_limit"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'bdid' + '}', bdid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceLimit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#create_balance_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create balance order
    # Returns created order
    # @param pid Loyalty Program Id
    # @param body Order Payload
    # @param [Hash] opts the optional parameters
    # @return [BalanceOrder]
    def create_balance_order(pid, body, opts = {})
      data, _status_code, _headers = create_balance_order_with_http_info(pid, body, opts)
      data
    end

    # Create balance order
    # Returns created order
    # @param pid Loyalty Program Id
    # @param body Order Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalanceOrder, Fixnum, Hash)>] BalanceOrder data, response status code and response headers
    def create_balance_order_with_http_info(pid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.create_balance_order ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.create_balance_order"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BalanceApi.create_balance_order"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/create-order'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#create_balance_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete balance definition
    # Delete Balance definition
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_balance_definition(pid, bdid, opts = {})
      delete_balance_definition_with_http_info(pid, bdid, opts)
      nil
    end

    # Delete balance definition
    # Delete Balance definition
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_balance_definition_with_http_info(pid, bdid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.delete_balance_definition ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.delete_balance_definition"
      end
      # verify the required parameter 'bdid' is set
      if @api_client.config.client_side_validation && bdid.nil?
        fail ArgumentError, "Missing the required parameter 'bdid' when calling BalanceApi.delete_balance_definition"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions/{bdid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'bdid' + '}', bdid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#delete_balance_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete balance limit
    # Delete balance limit
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param blid Balance Limit Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_balance_limit(pid, bdid, blid, opts = {})
      delete_balance_limit_with_http_info(pid, bdid, blid, opts)
      nil
    end

    # Delete balance limit
    # Delete balance limit
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param blid Balance Limit Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_balance_limit_with_http_info(pid, bdid, blid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.delete_balance_limit ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.delete_balance_limit"
      end
      # verify the required parameter 'bdid' is set
      if @api_client.config.client_side_validation && bdid.nil?
        fail ArgumentError, "Missing the required parameter 'bdid' when calling BalanceApi.delete_balance_limit"
      end
      # verify the required parameter 'blid' is set
      if @api_client.config.client_side_validation && blid.nil?
        fail ArgumentError, "Missing the required parameter 'blid' when calling BalanceApi.delete_balance_limit"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'bdid' + '}', bdid.to_s).sub('{' + 'blid' + '}', blid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#delete_balance_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get balance definition
    # Returns balance definition
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Version (default to draft)
    # @return [BalanceDefinition]
    def get_balance_definition(pid, bdid, opts = {})
      data, _status_code, _headers = get_balance_definition_with_http_info(pid, bdid, opts)
      data
    end

    # Get balance definition
    # Returns balance definition
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Version
    # @return [Array<(BalanceDefinition, Fixnum, Hash)>] BalanceDefinition data, response status code and response headers
    def get_balance_definition_with_http_info(pid, bdid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.get_balance_definition ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.get_balance_definition"
      end
      # verify the required parameter 'bdid' is set
      if @api_client.config.client_side_validation && bdid.nil?
        fail ArgumentError, "Missing the required parameter 'bdid' when calling BalanceApi.get_balance_definition"
      end
      if @api_client.config.client_side_validation && opts[:'version'] && !['active', 'draft'].include?(opts[:'version'])
        fail ArgumentError, 'invalid value for "version", must be one of active, draft'
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions/{bdid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'bdid' + '}', bdid.to_s)

      # query parameters
      query_params = {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#get_balance_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get balance definition list
    # Returns balance definition page
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of records returned (default to 200)
    # @option opts [Integer] :offset Offset to paginate records (default to 0)
    # @option opts [String] :sort_field Field to sort by (default to updated_at)
    # @option opts [String] :sort Sort direction (default to desc)
    # @option opts [String] :version Version (default to draft)
    # @return [BalanceDefinitionPage]
    def get_balance_definition_list(pid, opts = {})
      data, _status_code, _headers = get_balance_definition_list_with_http_info(pid, opts)
      data
    end

    # Get balance definition list
    # Returns balance definition page
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of records returned
    # @option opts [Integer] :offset Offset to paginate records
    # @option opts [String] :sort_field Field to sort by
    # @option opts [String] :sort Sort direction
    # @option opts [String] :version Version
    # @return [Array<(BalanceDefinitionPage, Fixnum, Hash)>] BalanceDefinitionPage data, response status code and response headers
    def get_balance_definition_list_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.get_balance_definition_list ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.get_balance_definition_list"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BalanceApi.get_balance_definition_list, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BalanceApi.get_balance_definition_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling BalanceApi.get_balance_definition_list, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'sort_field'] && !['name', 'created_at', 'updated_at'].include?(opts[:'sort_field'])
        fail ArgumentError, 'invalid value for "sort_field", must be one of name, created_at, updated_at'
      end
      if @api_client.config.client_side_validation && opts[:'sort'] && !['asc', 'desc'].include?(opts[:'sort'])
        fail ArgumentError, 'invalid value for "sort", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && opts[:'version'] && !['active', 'draft'].include?(opts[:'version'])
        fail ArgumentError, 'invalid value for "version", must be one of active, draft'
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sortField'] = opts[:'sort_field'] if !opts[:'sort_field'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceDefinitionPage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#get_balance_definition_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get balance limits
    # Fetches balance limits and send the created UUID along with the data
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param blid Balance Limit Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Version (default to draft)
    # @return [BalanceLimit]
    def get_balance_limit(pid, bdid, blid, opts = {})
      data, _status_code, _headers = get_balance_limit_with_http_info(pid, bdid, blid, opts)
      data
    end

    # Get balance limits
    # Fetches balance limits and send the created UUID along with the data
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param blid Balance Limit Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Version
    # @return [Array<(BalanceLimit, Fixnum, Hash)>] BalanceLimit data, response status code and response headers
    def get_balance_limit_with_http_info(pid, bdid, blid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.get_balance_limit ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.get_balance_limit"
      end
      # verify the required parameter 'bdid' is set
      if @api_client.config.client_side_validation && bdid.nil?
        fail ArgumentError, "Missing the required parameter 'bdid' when calling BalanceApi.get_balance_limit"
      end
      # verify the required parameter 'blid' is set
      if @api_client.config.client_side_validation && blid.nil?
        fail ArgumentError, "Missing the required parameter 'blid' when calling BalanceApi.get_balance_limit"
      end
      if @api_client.config.client_side_validation && opts[:'version'] && !['active', 'draft'].include?(opts[:'version'])
        fail ArgumentError, 'invalid value for "version", must be one of active, draft'
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'bdid' + '}', bdid.to_s).sub('{' + 'blid' + '}', blid.to_s)

      # query parameters
      query_params = {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceLimit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#get_balance_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get balance list
    # Returns balance list
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [ContactBalancesResp]
    def get_contact_balances(pid, opts = {})
      data, _status_code, _headers = get_contact_balances_with_http_info(pid, opts)
      data
    end

    # Get balance list
    # Returns balance list
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactBalancesResp, Fixnum, Hash)>] ContactBalancesResp data, response status code and response headers
    def get_contact_balances_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.get_contact_balances ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.get_contact_balances"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/contact-balances'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactBalancesResp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#get_contact_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get subscription balances
    # Returns subscription balances
    # @param cid Contact Id
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [ModelSubscriptionBalanceResp]
    def get_subscription_balances(cid, pid, opts = {})
      data, _status_code, _headers = get_subscription_balances_with_http_info(cid, pid, opts)
      data
    end

    # Get subscription balances
    # Returns subscription balances
    # @param cid Contact Id
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelSubscriptionBalanceResp, Fixnum, Hash)>] ModelSubscriptionBalanceResp data, response status code and response headers
    def get_subscription_balances_with_http_info(cid, pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.get_subscription_balances ...'
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling BalanceApi.get_subscription_balances"
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.get_subscription_balances"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/subscriptions/{cid}/balances'.sub('{' + 'cid' + '}', cid.to_s).sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelSubscriptionBalanceResp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#get_subscription_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Active Balances API
    # Returns Active Balances
    # @param pid Loyalty Program Id
    # @param contact_id Contact ID
    # @param balance_definition_id Balance Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit
    # @option opts [Integer] :offset Offset
    # @option opts [String] :sort_field Sort Field
    # @option opts [String] :sort Sort Order
    # @return [BalanceLimit]
    def loyalty_balance_programs_pid_active_balance_get(pid, contact_id, balance_definition_id, opts = {})
      data, _status_code, _headers = loyalty_balance_programs_pid_active_balance_get_with_http_info(pid, contact_id, balance_definition_id, opts)
      data
    end

    # Get Active Balances API
    # Returns Active Balances
    # @param pid Loyalty Program Id
    # @param contact_id Contact ID
    # @param balance_definition_id Balance Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit
    # @option opts [Integer] :offset Offset
    # @option opts [String] :sort_field Sort Field
    # @option opts [String] :sort Sort Order
    # @return [Array<(BalanceLimit, Fixnum, Hash)>] BalanceLimit data, response status code and response headers
    def loyalty_balance_programs_pid_active_balance_get_with_http_info(pid, contact_id, balance_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.loyalty_balance_programs_pid_active_balance_get ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.loyalty_balance_programs_pid_active_balance_get"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling BalanceApi.loyalty_balance_programs_pid_active_balance_get"
      end
      if @api_client.config.client_side_validation && contact_id < 1
        fail ArgumentError, 'invalid value for "contact_id" when calling BalanceApi.loyalty_balance_programs_pid_active_balance_get, must be greater than or equal to 1.'
      end

      # verify the required parameter 'balance_definition_id' is set
      if @api_client.config.client_side_validation && balance_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'balance_definition_id' when calling BalanceApi.loyalty_balance_programs_pid_active_balance_get"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BalanceApi.loyalty_balance_programs_pid_active_balance_get, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BalanceApi.loyalty_balance_programs_pid_active_balance_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling BalanceApi.loyalty_balance_programs_pid_active_balance_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/active-balance'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}
      query_params[:'contact_id'] = contact_id
      query_params[:'balance_definition_id'] = balance_definition_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_field'] = opts[:'sort_field'] if !opts[:'sort_field'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceLimit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#loyalty_balance_programs_pid_active_balance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create balance definition
    # Creates balance definition and returns information
    # @param pid Loyalty Program Id
    # @param body Create Balance Definition Payload
    # @param [Hash] opts the optional parameters
    # @return [BalanceDefinition]
    def loyalty_balance_programs_pid_balance_definitions_post(pid, body, opts = {})
      data, _status_code, _headers = loyalty_balance_programs_pid_balance_definitions_post_with_http_info(pid, body, opts)
      data
    end

    # Create balance definition
    # Creates balance definition and returns information
    # @param pid Loyalty Program Id
    # @param body Create Balance Definition Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalanceDefinition, Fixnum, Hash)>] BalanceDefinition data, response status code and response headers
    def loyalty_balance_programs_pid_balance_definitions_post_with_http_info(pid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.loyalty_balance_programs_pid_balance_definitions_post ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.loyalty_balance_programs_pid_balance_definitions_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BalanceApi.loyalty_balance_programs_pid_balance_definitions_post"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#loyalty_balance_programs_pid_balance_definitions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create subscription balances
    # Creates a balance for a contact
    # @param pid Loyalty Program Id
    # @param cid Contact Id
    # @param body Create Balnce Payload
    # @param [Hash] opts the optional parameters
    # @return [Balance]
    def loyalty_balance_programs_pid_subscriptions_cid_balances_post(pid, cid, body, opts = {})
      data, _status_code, _headers = loyalty_balance_programs_pid_subscriptions_cid_balances_post_with_http_info(pid, cid, body, opts)
      data
    end

    # Create subscription balances
    # Creates a balance for a contact
    # @param pid Loyalty Program Id
    # @param cid Contact Id
    # @param body Create Balnce Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Balance, Fixnum, Hash)>] Balance data, response status code and response headers
    def loyalty_balance_programs_pid_subscriptions_cid_balances_post_with_http_info(pid, cid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.loyalty_balance_programs_pid_subscriptions_cid_balances_post ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.loyalty_balance_programs_pid_subscriptions_cid_balances_post"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling BalanceApi.loyalty_balance_programs_pid_subscriptions_cid_balances_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BalanceApi.loyalty_balance_programs_pid_subscriptions_cid_balances_post"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/subscriptions/{cid}/balances'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Balance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#loyalty_balance_programs_pid_subscriptions_cid_balances_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transaction History API
    # Returns transaction history
    # @param pid Loyalty Program Id
    # @param contact_id Contact ID
    # @param balance_definition_id Balance Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of records returned (default to 20)
    # @option opts [Integer] :offset Skip a number of records (default to 0)
    # @option opts [String] :sort_field Field to sort by (default to created_at)
    # @option opts [String] :sort Sort order, either asc or desc (default to desc)
    # @option opts [Array<String>] :filters Filters to apply
    # @return [TransactionHistoryResp]
    def loyalty_balance_programs_pid_transaction_history_get(pid, contact_id, balance_definition_id, opts = {})
      data, _status_code, _headers = loyalty_balance_programs_pid_transaction_history_get_with_http_info(pid, contact_id, balance_definition_id, opts)
      data
    end

    # Get Transaction History API
    # Returns transaction history
    # @param pid Loyalty Program Id
    # @param contact_id Contact ID
    # @param balance_definition_id Balance Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of records returned
    # @option opts [Integer] :offset Skip a number of records
    # @option opts [String] :sort_field Field to sort by
    # @option opts [String] :sort Sort order, either asc or desc
    # @option opts [Array<String>] :filters Filters to apply
    # @return [Array<(TransactionHistoryResp, Fixnum, Hash)>] TransactionHistoryResp data, response status code and response headers
    def loyalty_balance_programs_pid_transaction_history_get_with_http_info(pid, contact_id, balance_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.loyalty_balance_programs_pid_transaction_history_get ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.loyalty_balance_programs_pid_transaction_history_get"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling BalanceApi.loyalty_balance_programs_pid_transaction_history_get"
      end
      # verify the required parameter 'balance_definition_id' is set
      if @api_client.config.client_side_validation && balance_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'balance_definition_id' when calling BalanceApi.loyalty_balance_programs_pid_transaction_history_get"
      end
      if @api_client.config.client_side_validation && opts[:'sort_field'] && !['name', 'created_at', 'updated_at'].include?(opts[:'sort_field'])
        fail ArgumentError, 'invalid value for "sort_field", must be one of name, created_at, updated_at'
      end
      if @api_client.config.client_side_validation && opts[:'sort'] && !['asc', 'desc'].include?(opts[:'sort'])
        fail ArgumentError, 'invalid value for "sort", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/transaction-history'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}
      query_params[:'contact_id'] = contact_id
      query_params[:'balance_definition_id'] = balance_definition_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_field'] = opts[:'sort_field'] if !opts[:'sort_field'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filters'] = @api_client.build_collection_param(opts[:'filters'], :multi) if !opts[:'filters'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionHistoryResp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#loyalty_balance_programs_pid_transaction_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update balance definition
    # Updates Balance definition
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param body Update Balance Definition Payload
    # @param [Hash] opts the optional parameters
    # @return [BalanceDefinition]
    def update_balance_definition(pid, bdid, body, opts = {})
      data, _status_code, _headers = update_balance_definition_with_http_info(pid, bdid, body, opts)
      data
    end

    # Update balance definition
    # Updates Balance definition
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param body Update Balance Definition Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalanceDefinition, Fixnum, Hash)>] BalanceDefinition data, response status code and response headers
    def update_balance_definition_with_http_info(pid, bdid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.update_balance_definition ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.update_balance_definition"
      end
      # verify the required parameter 'bdid' is set
      if @api_client.config.client_side_validation && bdid.nil?
        fail ArgumentError, "Missing the required parameter 'bdid' when calling BalanceApi.update_balance_definition"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BalanceApi.update_balance_definition"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions/{bdid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'bdid' + '}', bdid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#update_balance_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates balance limit
    # Updates balance limit
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param blid Balance Limit Id
    # @param body Balance Limits Payload
    # @param [Hash] opts the optional parameters
    # @return [BalanceLimit]
    def update_balance_limit(pid, bdid, blid, body, opts = {})
      data, _status_code, _headers = update_balance_limit_with_http_info(pid, bdid, blid, body, opts)
      data
    end

    # Updates balance limit
    # Updates balance limit
    # @param pid Loyalty Program Id
    # @param bdid Balance Definition Id
    # @param blid Balance Limit Id
    # @param body Balance Limits Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalanceLimit, Fixnum, Hash)>] BalanceLimit data, response status code and response headers
    def update_balance_limit_with_http_info(pid, bdid, blid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BalanceApi.update_balance_limit ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling BalanceApi.update_balance_limit"
      end
      # verify the required parameter 'bdid' is set
      if @api_client.config.client_side_validation && bdid.nil?
        fail ArgumentError, "Missing the required parameter 'bdid' when calling BalanceApi.update_balance_limit"
      end
      # verify the required parameter 'blid' is set
      if @api_client.config.client_side_validation && blid.nil?
        fail ArgumentError, "Missing the required parameter 'blid' when calling BalanceApi.update_balance_limit"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BalanceApi.update_balance_limit"
      end
      # resource path
      local_var_path = '/loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'bdid' + '}', bdid.to_s).sub('{' + 'blid' + '}', blid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceLimit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BalanceApi#update_balance_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
