=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module Brevo
  class MainReward
    # Maximum number of times a consumer can be attributed this reward
    attr_accessor :attribution_per_consumer

    # Unique identifier for the balance definition
    attr_accessor :balance_definition_id

    # Unique code for the reward
    attr_accessor :code

    # Total number of codes generated
    attr_accessor :code_count

    # Unique identifier for the code generator
    attr_accessor :code_generator_id

    # Unique identifier for the code pool
    attr_accessor :code_pool_id

    # Configuration settings for the reward
    attr_accessor :config

    # Timestamp when the reward was created
    attr_accessor :created_at

    # Disabled date of the reward
    attr_accessor :disabled_at

    # End date of the reward validity
    attr_accessor :end_date

    # Expiration date of the reward
    attr_accessor :expiration_date

    # Select startOfPeriod to configure rewards expiry on start of day/week/month/year. Select endOfPeriod to configure reward expiry on end of day/week/month/year, else select noModification
    attr_accessor :expiration_modifier

    # Unit of time for the rewards's availability (e.g., day/week/month/year).
    attr_accessor :expiration_unit

    # Number of days/weeks/month/year for reward expiry
    attr_accessor :expiration_value

    attr_accessor :generator

    # Unique identifier for the reward
    attr_accessor :id

    # Attribution / Redeem Limits for the reward
    attr_accessor :limits

    # Id of the loyalty program to which the current reward belongs to
    attr_accessor :loyalty_program_id

    # Additional data for reward definition
    attr_accessor :meta

    # Name of the reward
    attr_accessor :name

    # Selected products for reward definition
    attr_accessor :products

    # Public description for the reward
    attr_accessor :public_description

    # Public Image for the reward
    attr_accessor :public_image

    # Public name for the reward
    attr_accessor :public_name

    # Defines the redeem limit for the consumer
    attr_accessor :redeem_per_consumer

    # Rules defined to redeem a reward
    attr_accessor :redeem_rules

    attr_accessor :reward_configs

    attr_accessor :rule

    # Start date of attribution of the reward
    attr_accessor :start_date

    # Id of the selected balance while redeeming / attributing a reward
    attr_accessor :subtract_balance_definition_id

    # Strategy of the Balance while redeeming / attributing a reward
    attr_accessor :subtract_balance_strategy

    # Amount of balance to be selected while redeeming / attributing a reward
    attr_accessor :subtract_balance_value

    # Value to indicate to subtract full balance or not
    attr_accessor :subtract_total_balance

    # Defines the limit to which a consumer can attribute a reward
    attr_accessor :total_attribution

    # Defines the limit to which a consumer can redeem a reward
    attr_accessor :total_redeem

    # Id of the Rule to be updated for that reward
    attr_accessor :trigger_id

    # Selected unit of the balance
    attr_accessor :unit

    # Timestamp for when this reward was last updated.
    attr_accessor :updated_at

    # Value of metric in selected config for reward definition
    attr_accessor :value

    # Type of config selected for reward definition
    attr_accessor :value_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'attribution_per_consumer' => :'attributionPerConsumer',
        :'balance_definition_id' => :'balanceDefinitionId',
        :'code' => :'code',
        :'code_count' => :'codeCount',
        :'code_generator_id' => :'codeGeneratorId',
        :'code_pool_id' => :'codePoolId',
        :'config' => :'config',
        :'created_at' => :'createdAt',
        :'disabled_at' => :'disabledAt',
        :'end_date' => :'endDate',
        :'expiration_date' => :'expirationDate',
        :'expiration_modifier' => :'expirationModifier',
        :'expiration_unit' => :'expirationUnit',
        :'expiration_value' => :'expirationValue',
        :'generator' => :'generator',
        :'id' => :'id',
        :'limits' => :'limits',
        :'loyalty_program_id' => :'loyaltyProgramId',
        :'meta' => :'meta',
        :'name' => :'name',
        :'products' => :'products',
        :'public_description' => :'publicDescription',
        :'public_image' => :'publicImage',
        :'public_name' => :'publicName',
        :'redeem_per_consumer' => :'redeemPerConsumer',
        :'redeem_rules' => :'redeemRules',
        :'reward_configs' => :'rewardConfigs',
        :'rule' => :'rule',
        :'start_date' => :'startDate',
        :'subtract_balance_definition_id' => :'subtractBalanceDefinitionId',
        :'subtract_balance_strategy' => :'subtractBalanceStrategy',
        :'subtract_balance_value' => :'subtractBalanceValue',
        :'subtract_total_balance' => :'subtractTotalBalance',
        :'total_attribution' => :'totalAttribution',
        :'total_redeem' => :'totalRedeem',
        :'trigger_id' => :'triggerId',
        :'unit' => :'unit',
        :'updated_at' => :'updatedAt',
        :'value' => :'value',
        :'value_type' => :'valueType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'attribution_per_consumer' => :'Integer',
        :'balance_definition_id' => :'String',
        :'code' => :'String',
        :'code_count' => :'Integer',
        :'code_generator_id' => :'String',
        :'code_pool_id' => :'String',
        :'config' => :'String',
        :'created_at' => :'DateTime',
        :'disabled_at' => :'DateTime',
        :'end_date' => :'DateTime',
        :'expiration_date' => :'DateTime',
        :'expiration_modifier' => :'String',
        :'expiration_unit' => :'String',
        :'expiration_value' => :'Integer',
        :'generator' => :'MainRewardGenerator',
        :'id' => :'String',
        :'limits' => :'Array<MainLimit>',
        :'loyalty_program_id' => :'String',
        :'meta' => :'Hash<String, Object>',
        :'name' => :'String',
        :'products' => :'Array<MainProduct>',
        :'public_description' => :'String',
        :'public_image' => :'String',
        :'public_name' => :'String',
        :'redeem_per_consumer' => :'Integer',
        :'redeem_rules' => :'Array<String>',
        :'reward_configs' => :'MainRewardGenerator',
        :'rule' => :'MainRewardRule',
        :'start_date' => :'DateTime',
        :'subtract_balance_definition_id' => :'String',
        :'subtract_balance_strategy' => :'String',
        :'subtract_balance_value' => :'Integer',
        :'subtract_total_balance' => :'BOOLEAN',
        :'total_attribution' => :'Integer',
        :'total_redeem' => :'Integer',
        :'trigger_id' => :'String',
        :'unit' => :'String',
        :'updated_at' => :'String',
        :'value' => :'Float',
        :'value_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'attributionPerConsumer')
        self.attribution_per_consumer = attributes[:'attributionPerConsumer']
      end

      if attributes.has_key?(:'balanceDefinitionId')
        self.balance_definition_id = attributes[:'balanceDefinitionId']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'codeCount')
        self.code_count = attributes[:'codeCount']
      end

      if attributes.has_key?(:'codeGeneratorId')
        self.code_generator_id = attributes[:'codeGeneratorId']
      end

      if attributes.has_key?(:'codePoolId')
        self.code_pool_id = attributes[:'codePoolId']
      end

      if attributes.has_key?(:'config')
        self.config = attributes[:'config']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'disabledAt')
        self.disabled_at = attributes[:'disabledAt']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'expirationDate')
        self.expiration_date = attributes[:'expirationDate']
      end

      if attributes.has_key?(:'expirationModifier')
        self.expiration_modifier = attributes[:'expirationModifier']
      else
        self.expiration_modifier = 'noModification'
      end

      if attributes.has_key?(:'expirationUnit')
        self.expiration_unit = attributes[:'expirationUnit']
      end

      if attributes.has_key?(:'expirationValue')
        self.expiration_value = attributes[:'expirationValue']
      end

      if attributes.has_key?(:'generator')
        self.generator = attributes[:'generator']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'limits')
        if (value = attributes[:'limits']).is_a?(Array)
          self.limits = value
        end
      end

      if attributes.has_key?(:'loyaltyProgramId')
        self.loyalty_program_id = attributes[:'loyaltyProgramId']
      end

      if attributes.has_key?(:'meta')
        if (value = attributes[:'meta']).is_a?(Hash)
          self.meta = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'products')
        if (value = attributes[:'products']).is_a?(Array)
          self.products = value
        end
      end

      if attributes.has_key?(:'publicDescription')
        self.public_description = attributes[:'publicDescription']
      end

      if attributes.has_key?(:'publicImage')
        self.public_image = attributes[:'publicImage']
      end

      if attributes.has_key?(:'publicName')
        self.public_name = attributes[:'publicName']
      end

      if attributes.has_key?(:'redeemPerConsumer')
        self.redeem_per_consumer = attributes[:'redeemPerConsumer']
      end

      if attributes.has_key?(:'redeemRules')
        if (value = attributes[:'redeemRules']).is_a?(Array)
          self.redeem_rules = value
        end
      end

      if attributes.has_key?(:'rewardConfigs')
        self.reward_configs = attributes[:'rewardConfigs']
      end

      if attributes.has_key?(:'rule')
        self.rule = attributes[:'rule']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'subtractBalanceDefinitionId')
        self.subtract_balance_definition_id = attributes[:'subtractBalanceDefinitionId']
      end

      if attributes.has_key?(:'subtractBalanceStrategy')
        self.subtract_balance_strategy = attributes[:'subtractBalanceStrategy']
      end

      if attributes.has_key?(:'subtractBalanceValue')
        self.subtract_balance_value = attributes[:'subtractBalanceValue']
      end

      if attributes.has_key?(:'subtractTotalBalance')
        self.subtract_total_balance = attributes[:'subtractTotalBalance']
      end

      if attributes.has_key?(:'totalAttribution')
        self.total_attribution = attributes[:'totalAttribution']
      end

      if attributes.has_key?(:'totalRedeem')
        self.total_redeem = attributes[:'totalRedeem']
      end

      if attributes.has_key?(:'triggerId')
        self.trigger_id = attributes[:'triggerId']
      end

      if attributes.has_key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.has_key?(:'valueType')
        self.value_type = attributes[:'valueType']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      expiration_modifier_validator = EnumAttributeValidator.new('String', ['startOfPeriod', 'endOfPeriod', 'noModification'])
      return false unless expiration_modifier_validator.valid?(@expiration_modifier)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expiration_modifier Object to be assigned
    def expiration_modifier=(expiration_modifier)
      validator = EnumAttributeValidator.new('String', ['startOfPeriod', 'endOfPeriod', 'noModification'])
      unless validator.valid?(expiration_modifier)
        fail ArgumentError, 'invalid value for "expiration_modifier", must be one of #{validator.allowable_values}.'
      end
      @expiration_modifier = expiration_modifier
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attribution_per_consumer == o.attribution_per_consumer &&
          balance_definition_id == o.balance_definition_id &&
          code == o.code &&
          code_count == o.code_count &&
          code_generator_id == o.code_generator_id &&
          code_pool_id == o.code_pool_id &&
          config == o.config &&
          created_at == o.created_at &&
          disabled_at == o.disabled_at &&
          end_date == o.end_date &&
          expiration_date == o.expiration_date &&
          expiration_modifier == o.expiration_modifier &&
          expiration_unit == o.expiration_unit &&
          expiration_value == o.expiration_value &&
          generator == o.generator &&
          id == o.id &&
          limits == o.limits &&
          loyalty_program_id == o.loyalty_program_id &&
          meta == o.meta &&
          name == o.name &&
          products == o.products &&
          public_description == o.public_description &&
          public_image == o.public_image &&
          public_name == o.public_name &&
          redeem_per_consumer == o.redeem_per_consumer &&
          redeem_rules == o.redeem_rules &&
          reward_configs == o.reward_configs &&
          rule == o.rule &&
          start_date == o.start_date &&
          subtract_balance_definition_id == o.subtract_balance_definition_id &&
          subtract_balance_strategy == o.subtract_balance_strategy &&
          subtract_balance_value == o.subtract_balance_value &&
          subtract_total_balance == o.subtract_total_balance &&
          total_attribution == o.total_attribution &&
          total_redeem == o.total_redeem &&
          trigger_id == o.trigger_id &&
          unit == o.unit &&
          updated_at == o.updated_at &&
          value == o.value &&
          value_type == o.value_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [attribution_per_consumer, balance_definition_id, code, code_count, code_generator_id, code_pool_id, config, created_at, disabled_at, end_date, expiration_date, expiration_modifier, expiration_unit, expiration_value, generator, id, limits, loyalty_program_id, meta, name, products, public_description, public_image, public_name, redeem_per_consumer, redeem_rules, reward_configs, rule, start_date, subtract_balance_definition_id, subtract_balance_strategy, subtract_balance_value, subtract_total_balance, total_attribution, total_redeem, trigger_id, unit, updated_at, value, value_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Brevo.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
