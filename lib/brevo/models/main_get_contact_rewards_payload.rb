=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module Brevo
  class MainGetContactRewardsPayload
    # Contact to attribute the reward
    attr_accessor :contact_id

    # Number of documents per page
    attr_accessor :limit

    # Data to define the reward for that particular contact
    attr_accessor :metadata

    # Index of the first document in the page
    attr_accessor :offset

    # Unique identifier of the associated reward
    attr_accessor :reward_id

    # Sort the documents in the ascending or descending order
    attr_accessor :sort

    # Sort documents by field
    attr_accessor :sort_field

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'contact_id' => :'contactId',
        :'limit' => :'limit',
        :'metadata' => :'metadata',
        :'offset' => :'offset',
        :'reward_id' => :'rewardId',
        :'sort' => :'sort',
        :'sort_field' => :'sortField'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'contact_id' => :'Integer',
        :'limit' => :'Integer',
        :'metadata' => :'Array<MainFilter>',
        :'offset' => :'Integer',
        :'reward_id' => :'String',
        :'sort' => :'String',
        :'sort_field' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'contactId')
        self.contact_id = attributes[:'contactId']
      end

      if attributes.has_key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Array)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.has_key?(:'rewardId')
        self.reward_id = attributes[:'rewardId']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.has_key?(:'sortField')
        self.sort_field = attributes[:'sortField']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @contact_id.nil?
        invalid_properties.push('invalid value for "contact_id", contact_id cannot be nil.')
      end

      if @contact_id < 1
        invalid_properties.push('invalid value for "contact_id", must be greater than or equal to 1.')
      end

      if !@limit.nil? && @limit > 500
        invalid_properties.push('invalid value for "limit", must be smaller than or equal to 500.')
      end

      if !@limit.nil? && @limit < 1
        invalid_properties.push('invalid value for "limit", must be greater than or equal to 1.')
      end

      if !@offset.nil? && @offset < 0
        invalid_properties.push('invalid value for "offset", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @contact_id.nil?
      return false if @contact_id < 1
      return false if !@limit.nil? && @limit > 500
      return false if !@limit.nil? && @limit < 1
      return false if !@offset.nil? && @offset < 0
      sort_validator = EnumAttributeValidator.new('String', ['asc', 'desc'])
      return false unless sort_validator.valid?(@sort)
      sort_field_validator = EnumAttributeValidator.new('String', ['updatedAt', 'createdAt'])
      return false unless sort_field_validator.valid?(@sort_field)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_id Value to be assigned
    def contact_id=(contact_id)
      if contact_id.nil?
        fail ArgumentError, 'contact_id cannot be nil'
      end

      if contact_id < 1
        fail ArgumentError, 'invalid value for "contact_id", must be greater than or equal to 1.'
      end

      @contact_id = contact_id
    end

    # Custom attribute writer method with validation
    # @param [Object] limit Value to be assigned
    def limit=(limit)
      if !limit.nil? && limit > 500
        fail ArgumentError, 'invalid value for "limit", must be smaller than or equal to 500.'
      end

      if !limit.nil? && limit < 1
        fail ArgumentError, 'invalid value for "limit", must be greater than or equal to 1.'
      end

      @limit = limit
    end

    # Custom attribute writer method with validation
    # @param [Object] offset Value to be assigned
    def offset=(offset)
      if !offset.nil? && offset < 0
        fail ArgumentError, 'invalid value for "offset", must be greater than or equal to 0.'
      end

      @offset = offset
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort Object to be assigned
    def sort=(sort)
      validator = EnumAttributeValidator.new('String', ['asc', 'desc'])
      unless validator.valid?(sort)
        fail ArgumentError, 'invalid value for "sort", must be one of #{validator.allowable_values}.'
      end
      @sort = sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort_field Object to be assigned
    def sort_field=(sort_field)
      validator = EnumAttributeValidator.new('String', ['updatedAt', 'createdAt'])
      unless validator.valid?(sort_field)
        fail ArgumentError, 'invalid value for "sort_field", must be one of #{validator.allowable_values}.'
      end
      @sort_field = sort_field
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          contact_id == o.contact_id &&
          limit == o.limit &&
          metadata == o.metadata &&
          offset == o.offset &&
          reward_id == o.reward_id &&
          sort == o.sort &&
          sort_field == o.sort_field
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [contact_id, limit, metadata, offset, reward_id, sort, sort_field].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Brevo.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
