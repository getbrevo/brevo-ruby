=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module Brevo
  class TierApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign a tier
    # Manually assigns a tier to a specific membership.
    # @param pid Loyalty Program ID
    # @param cid Contact ID
    # @param tid Tier ID
    # @param [Hash] opts the optional parameters
    # @return [TierForContact]
    def add_subscription_to_tier(pid, cid, tid, opts = {})
      data, _status_code, _headers = add_subscription_to_tier_with_http_info(pid, cid, tid, opts)
      data
    end

    # Assign a tier
    # Manually assigns a tier to a specific membership.
    # @param pid Loyalty Program ID
    # @param cid Contact ID
    # @param tid Tier ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TierForContact, Fixnum, Hash)>] TierForContact data, response status code and response headers
    def add_subscription_to_tier_with_http_info(pid, cid, tid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.add_subscription_to_tier ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.add_subscription_to_tier"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling TierApi.add_subscription_to_tier"
      end
      # verify the required parameter 'tid' is set
      if @api_client.config.client_side_validation && tid.nil?
        fail ArgumentError, "Missing the required parameter 'tid' when calling TierApi.add_subscription_to_tier"
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/contacts/{cid}/tiers/{tid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'cid' + '}', cid.to_s).sub('{' + 'tid' + '}', tid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TierForContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#add_subscription_to_tier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a tier
    # Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Tier]
    def create_tier_for_tier_group(pid, gid, payload, opts = {})
      data, _status_code, _headers = create_tier_for_tier_group_with_http_info(pid, gid, payload, opts)
      data
    end

    # Create a tier
    # Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier, Fixnum, Hash)>] Tier data, response status code and response headers
    def create_tier_for_tier_group_with_http_info(pid, gid, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.create_tier_for_tier_group ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.create_tier_for_tier_group"
      end
      # verify the required parameter 'gid' is set
      if @api_client.config.client_side_validation && gid.nil?
        fail ArgumentError, "Missing the required parameter 'gid' when calling TierApi.create_tier_for_tier_group"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling TierApi.create_tier_for_tier_group"
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tier-groups/{gid}/tiers'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'gid' + '}', gid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#create_tier_for_tier_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a tier group
    # Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param payload Tier group creation payload
    # @param [Hash] opts the optional parameters
    # @return [TierGroup]
    def create_tier_group(pid, payload, opts = {})
      data, _status_code, _headers = create_tier_group_with_http_info(pid, payload, opts)
      data
    end

    # Create a tier group
    # Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param payload Tier group creation payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(TierGroup, Fixnum, Hash)>] TierGroup data, response status code and response headers
    def create_tier_group_with_http_info(pid, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.create_tier_group ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.create_tier_group"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling TierApi.create_tier_group"
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tier-groups'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TierGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#create_tier_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tier
    # Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param tid Tier ID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_tier(pid, tid, opts = {})
      data, _status_code, _headers = delete_tier_with_http_info(pid, tid, opts)
      data
    end

    # Delete tier
    # Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param tid Tier ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_tier_with_http_info(pid, tid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.delete_tier ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.delete_tier"
      end
      # verify the required parameter 'tid' is set
      if @api_client.config.client_side_validation && tid.nil?
        fail ArgumentError, "Missing the required parameter 'tid' when calling TierApi.delete_tier"
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tiers/{tid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'tid' + '}', tid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#delete_tier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tier group
    # Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_tier_group(pid, gid, opts = {})
      data, _status_code, _headers = delete_tier_group_with_http_info(pid, gid, opts)
      data
    end

    # Delete tier group
    # Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_tier_group_with_http_info(pid, gid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.delete_tier_group ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.delete_tier_group"
      end
      # verify the required parameter 'gid' is set
      if @api_client.config.client_side_validation && gid.nil?
        fail ArgumentError, "Missing the required parameter 'gid' when calling TierApi.delete_tier_group"
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tier-groups/{gid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'gid' + '}', gid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#delete_tier_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List tier groups
    # Returns the list of tier groups defined within the loyalty program.
    # @param pid Loyalty Program ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (default to draft)
    # @return [TierGroupPage]
    def get_list_of_tier_groups(pid, opts = {})
      data, _status_code, _headers = get_list_of_tier_groups_with_http_info(pid, opts)
      data
    end

    # List tier groups
    # Returns the list of tier groups defined within the loyalty program.
    # @param pid Loyalty Program ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups.
    # @return [Array<(TierGroupPage, Fixnum, Hash)>] TierGroupPage data, response status code and response headers
    def get_list_of_tier_groups_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.get_list_of_tier_groups ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.get_list_of_tier_groups"
      end
      if @api_client.config.client_side_validation && opts[:'version'] && !['active', 'draft'].include?(opts[:'version'])
        fail ArgumentError, 'invalid value for "version", must be one of active, draft'
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tier-groups'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TierGroupPage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#get_list_of_tier_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List tiers
    # Returns the list of tiers defined within the loyalty program.
    # @param pid Loyalty Program ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (default to draft)
    # @return [LoyaltyTierPage]
    def get_loyalty_program_tier(pid, opts = {})
      data, _status_code, _headers = get_loyalty_program_tier_with_http_info(pid, opts)
      data
    end

    # List tiers
    # Returns the list of tiers defined within the loyalty program.
    # @param pid Loyalty Program ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers.
    # @return [Array<(LoyaltyTierPage, Fixnum, Hash)>] LoyaltyTierPage data, response status code and response headers
    def get_loyalty_program_tier_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.get_loyalty_program_tier ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.get_loyalty_program_tier"
      end
      if @api_client.config.client_side_validation && opts[:'version'] && !['active', 'draft'].include?(opts[:'version'])
        fail ArgumentError, 'invalid value for "version", must be one of active, draft'
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tiers'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoyaltyTierPage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#get_loyalty_program_tier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier group
    # Returns tier group information.
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (default to draft)
    # @return [TierGroup]
    def get_tier_group(pid, gid, opts = {})
      data, _status_code, _headers = get_tier_group_with_http_info(pid, gid, opts)
      data
    end

    # Get tier group
    # Returns tier group information.
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group.
    # @return [Array<(TierGroup, Fixnum, Hash)>] TierGroup data, response status code and response headers
    def get_tier_group_with_http_info(pid, gid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.get_tier_group ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.get_tier_group"
      end
      # verify the required parameter 'gid' is set
      if @api_client.config.client_side_validation && gid.nil?
        fail ArgumentError, "Missing the required parameter 'gid' when calling TierApi.get_tier_group"
      end
      if @api_client.config.client_side_validation && opts[:'version'] && !['active', 'draft'].include?(opts[:'version'])
        fail ArgumentError, 'invalid value for "version", must be one of active, draft'
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tier-groups/{gid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'gid' + '}', gid.to_s)

      # query parameters
      query_params = {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TierGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#get_tier_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update tier
    # Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param tid Tier ID
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Tier]
    def update_tier(pid, tid, payload, opts = {})
      data, _status_code, _headers = update_tier_with_http_info(pid, tid, payload, opts)
      data
    end

    # Update tier
    # Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param tid Tier ID
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier, Fixnum, Hash)>] Tier data, response status code and response headers
    def update_tier_with_http_info(pid, tid, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.update_tier ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.update_tier"
      end
      # verify the required parameter 'tid' is set
      if @api_client.config.client_side_validation && tid.nil?
        fail ArgumentError, "Missing the required parameter 'tid' when calling TierApi.update_tier"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling TierApi.update_tier"
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tiers/{tid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'tid' + '}', tid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#update_tier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update tier group
    # Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param payload Tier group update payload
    # @param [Hash] opts the optional parameters
    # @return [TierGroup]
    def update_tier_group(pid, gid, payload, opts = {})
      data, _status_code, _headers = update_tier_group_with_http_info(pid, gid, payload, opts)
      data
    end

    # Update tier group
    # Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
    # @param pid Loyalty Program ID
    # @param gid Tier group ID
    # @param payload Tier group update payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(TierGroup, Fixnum, Hash)>] TierGroup data, response status code and response headers
    def update_tier_group_with_http_info(pid, gid, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TierApi.update_tier_group ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling TierApi.update_tier_group"
      end
      # verify the required parameter 'gid' is set
      if @api_client.config.client_side_validation && gid.nil?
        fail ArgumentError, "Missing the required parameter 'gid' when calling TierApi.update_tier_group"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling TierApi.update_tier_group"
      end
      # resource path
      local_var_path = '/loyalty/tier/programs/{pid}/tier-groups/{gid}'.sub('{' + 'pid' + '}', pid.to_s).sub('{' + 'gid' + '}', gid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TierGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TierApi#update_tier_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
