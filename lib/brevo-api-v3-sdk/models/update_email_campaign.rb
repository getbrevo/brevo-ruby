=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module BrevoApiV3Sdk
  class UpdateEmailCampaign
    # Tag of the campaign
    attr_accessor :tag

    attr_accessor :sender

    # Name of the campaign
    attr_accessor :name

    # Body of the message (HTML version). If the campaign is designed using Drag & Drop editor via HTML content, then the design page will not have Drag & Drop editor access for that campaign. REQUIRED if htmlUrl is empty
    attr_accessor :html_content

    # Url which contents the body of the email message. REQUIRED if htmlContent is empty
    attr_accessor :html_url

    # UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
    attr_accessor :scheduled_at

    # Subject of the campaign
    attr_accessor :subject

    # Email on which campaign recipients will be able to reply to
    attr_accessor :reply_to

    # To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
    attr_accessor :to_field

    attr_accessor :recipients

    # Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
    attr_accessor :attachment_url

    # Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.
    attr_accessor :inline_image_activation

    # Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
    attr_accessor :mirror_active

    # FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
    attr_accessor :recurring

    # Footer of the email campaign
    attr_accessor :footer

    # Header of the email campaign
    attr_accessor :header

    # Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
    attr_accessor :utm_campaign

    # Pass the set of attributes to customize the type 'classic' campaign. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. The 'params' field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'
    attr_accessor :params

    # Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.
    attr_accessor :send_at_best_time

    # Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered if abTesting is set to true. 'subject' if passed is ignored.  Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
    attr_accessor :ab_testing

    # Subject A of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
    attr_accessor :subject_a

    # Subject B of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
    attr_accessor :subject_b

    # Add the size of your test groups. Considered if abTesting = true. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
    attr_accessor :split_rule

    # Choose the metrics that will determinate the winning version. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed or alreday exist in record
    attr_accessor :winner_criteria

    # Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed or alreday exist in record
    attr_accessor :winner_delay

    # Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
    attr_accessor :ip_warmup_enable

    # Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
    attr_accessor :initial_quota

    # Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
    attr_accessor :increase_rate

    # Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page.
    attr_accessor :unsubscription_page_id

    # Mandatory if templateId is used containing the {{ update_profile }} tag. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form.
    attr_accessor :update_form_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tag' => :'tag',
        :'sender' => :'sender',
        :'name' => :'name',
        :'html_content' => :'htmlContent',
        :'html_url' => :'htmlUrl',
        :'scheduled_at' => :'scheduledAt',
        :'subject' => :'subject',
        :'reply_to' => :'replyTo',
        :'to_field' => :'toField',
        :'recipients' => :'recipients',
        :'attachment_url' => :'attachmentUrl',
        :'inline_image_activation' => :'inlineImageActivation',
        :'mirror_active' => :'mirrorActive',
        :'recurring' => :'recurring',
        :'footer' => :'footer',
        :'header' => :'header',
        :'utm_campaign' => :'utmCampaign',
        :'params' => :'params',
        :'send_at_best_time' => :'sendAtBestTime',
        :'ab_testing' => :'abTesting',
        :'subject_a' => :'subjectA',
        :'subject_b' => :'subjectB',
        :'split_rule' => :'splitRule',
        :'winner_criteria' => :'winnerCriteria',
        :'winner_delay' => :'winnerDelay',
        :'ip_warmup_enable' => :'ipWarmupEnable',
        :'initial_quota' => :'initialQuota',
        :'increase_rate' => :'increaseRate',
        :'unsubscription_page_id' => :'unsubscriptionPageId',
        :'update_form_id' => :'updateFormId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'tag' => :'String',
        :'sender' => :'UpdateEmailCampaignSender',
        :'name' => :'String',
        :'html_content' => :'String',
        :'html_url' => :'String',
        :'scheduled_at' => :'String',
        :'subject' => :'String',
        :'reply_to' => :'String',
        :'to_field' => :'String',
        :'recipients' => :'UpdateEmailCampaignRecipients',
        :'attachment_url' => :'String',
        :'inline_image_activation' => :'BOOLEAN',
        :'mirror_active' => :'BOOLEAN',
        :'recurring' => :'BOOLEAN',
        :'footer' => :'String',
        :'header' => :'String',
        :'utm_campaign' => :'String',
        :'params' => :'Object',
        :'send_at_best_time' => :'BOOLEAN',
        :'ab_testing' => :'BOOLEAN',
        :'subject_a' => :'String',
        :'subject_b' => :'String',
        :'split_rule' => :'Integer',
        :'winner_criteria' => :'String',
        :'winner_delay' => :'Integer',
        :'ip_warmup_enable' => :'BOOLEAN',
        :'initial_quota' => :'Integer',
        :'increase_rate' => :'Integer',
        :'unsubscription_page_id' => :'String',
        :'update_form_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.has_key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'htmlContent')
        self.html_content = attributes[:'htmlContent']
      end

      if attributes.has_key?(:'htmlUrl')
        self.html_url = attributes[:'htmlUrl']
      end

      if attributes.has_key?(:'scheduledAt')
        self.scheduled_at = attributes[:'scheduledAt']
      end

      if attributes.has_key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.has_key?(:'replyTo')
        self.reply_to = attributes[:'replyTo']
      end

      if attributes.has_key?(:'toField')
        self.to_field = attributes[:'toField']
      end

      if attributes.has_key?(:'recipients')
        self.recipients = attributes[:'recipients']
      end

      if attributes.has_key?(:'attachmentUrl')
        self.attachment_url = attributes[:'attachmentUrl']
      end

      if attributes.has_key?(:'inlineImageActivation')
        self.inline_image_activation = attributes[:'inlineImageActivation']
      else
        self.inline_image_activation = false
      end

      if attributes.has_key?(:'mirrorActive')
        self.mirror_active = attributes[:'mirrorActive']
      end

      if attributes.has_key?(:'recurring')
        self.recurring = attributes[:'recurring']
      else
        self.recurring = false
      end

      if attributes.has_key?(:'footer')
        self.footer = attributes[:'footer']
      end

      if attributes.has_key?(:'header')
        self.header = attributes[:'header']
      end

      if attributes.has_key?(:'utmCampaign')
        self.utm_campaign = attributes[:'utmCampaign']
      end

      if attributes.has_key?(:'params')
        self.params = attributes[:'params']
      end

      if attributes.has_key?(:'sendAtBestTime')
        self.send_at_best_time = attributes[:'sendAtBestTime']
      end

      if attributes.has_key?(:'abTesting')
        self.ab_testing = attributes[:'abTesting']
      else
        self.ab_testing = false
      end

      if attributes.has_key?(:'subjectA')
        self.subject_a = attributes[:'subjectA']
      end

      if attributes.has_key?(:'subjectB')
        self.subject_b = attributes[:'subjectB']
      end

      if attributes.has_key?(:'splitRule')
        self.split_rule = attributes[:'splitRule']
      end

      if attributes.has_key?(:'winnerCriteria')
        self.winner_criteria = attributes[:'winnerCriteria']
      end

      if attributes.has_key?(:'winnerDelay')
        self.winner_delay = attributes[:'winnerDelay']
      end

      if attributes.has_key?(:'ipWarmupEnable')
        self.ip_warmup_enable = attributes[:'ipWarmupEnable']
      else
        self.ip_warmup_enable = false
      end

      if attributes.has_key?(:'initialQuota')
        self.initial_quota = attributes[:'initialQuota']
      end

      if attributes.has_key?(:'increaseRate')
        self.increase_rate = attributes[:'increaseRate']
      end

      if attributes.has_key?(:'unsubscriptionPageId')
        self.unsubscription_page_id = attributes[:'unsubscriptionPageId']
      end

      if attributes.has_key?(:'updateFormId')
        self.update_form_id = attributes[:'updateFormId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@split_rule.nil? && @split_rule > 50
        invalid_properties.push('invalid value for "split_rule", must be smaller than or equal to 50.')
      end

      if !@split_rule.nil? && @split_rule < 1
        invalid_properties.push('invalid value for "split_rule", must be greater than or equal to 1.')
      end

      if !@winner_delay.nil? && @winner_delay > 168
        invalid_properties.push('invalid value for "winner_delay", must be smaller than or equal to 168.')
      end

      if !@winner_delay.nil? && @winner_delay < 1
        invalid_properties.push('invalid value for "winner_delay", must be greater than or equal to 1.')
      end

      if !@increase_rate.nil? && @increase_rate > 100
        invalid_properties.push('invalid value for "increase_rate", must be smaller than or equal to 100.')
      end

      if !@increase_rate.nil? && @increase_rate < 0
        invalid_properties.push('invalid value for "increase_rate", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@split_rule.nil? && @split_rule > 50
      return false if !@split_rule.nil? && @split_rule < 1
      winner_criteria_validator = EnumAttributeValidator.new('String', ['open', 'click'])
      return false unless winner_criteria_validator.valid?(@winner_criteria)
      return false if !@winner_delay.nil? && @winner_delay > 168
      return false if !@winner_delay.nil? && @winner_delay < 1
      return false if !@increase_rate.nil? && @increase_rate > 100
      return false if !@increase_rate.nil? && @increase_rate < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] split_rule Value to be assigned
    def split_rule=(split_rule)
      if !split_rule.nil? && split_rule > 50
        fail ArgumentError, 'invalid value for "split_rule", must be smaller than or equal to 50.'
      end

      if !split_rule.nil? && split_rule < 1
        fail ArgumentError, 'invalid value for "split_rule", must be greater than or equal to 1.'
      end

      @split_rule = split_rule
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] winner_criteria Object to be assigned
    def winner_criteria=(winner_criteria)
      validator = EnumAttributeValidator.new('String', ['open', 'click'])
      unless validator.valid?(winner_criteria)
        fail ArgumentError, 'invalid value for "winner_criteria", must be one of #{validator.allowable_values}.'
      end
      @winner_criteria = winner_criteria
    end

    # Custom attribute writer method with validation
    # @param [Object] winner_delay Value to be assigned
    def winner_delay=(winner_delay)
      if !winner_delay.nil? && winner_delay > 168
        fail ArgumentError, 'invalid value for "winner_delay", must be smaller than or equal to 168.'
      end

      if !winner_delay.nil? && winner_delay < 1
        fail ArgumentError, 'invalid value for "winner_delay", must be greater than or equal to 1.'
      end

      @winner_delay = winner_delay
    end

    # Custom attribute writer method with validation
    # @param [Object] increase_rate Value to be assigned
    def increase_rate=(increase_rate)
      if !increase_rate.nil? && increase_rate > 100
        fail ArgumentError, 'invalid value for "increase_rate", must be smaller than or equal to 100.'
      end

      if !increase_rate.nil? && increase_rate < 0
        fail ArgumentError, 'invalid value for "increase_rate", must be greater than or equal to 0.'
      end

      @increase_rate = increase_rate
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tag == o.tag &&
          sender == o.sender &&
          name == o.name &&
          html_content == o.html_content &&
          html_url == o.html_url &&
          scheduled_at == o.scheduled_at &&
          subject == o.subject &&
          reply_to == o.reply_to &&
          to_field == o.to_field &&
          recipients == o.recipients &&
          attachment_url == o.attachment_url &&
          inline_image_activation == o.inline_image_activation &&
          mirror_active == o.mirror_active &&
          recurring == o.recurring &&
          footer == o.footer &&
          header == o.header &&
          utm_campaign == o.utm_campaign &&
          params == o.params &&
          send_at_best_time == o.send_at_best_time &&
          ab_testing == o.ab_testing &&
          subject_a == o.subject_a &&
          subject_b == o.subject_b &&
          split_rule == o.split_rule &&
          winner_criteria == o.winner_criteria &&
          winner_delay == o.winner_delay &&
          ip_warmup_enable == o.ip_warmup_enable &&
          initial_quota == o.initial_quota &&
          increase_rate == o.increase_rate &&
          unsubscription_page_id == o.unsubscription_page_id &&
          update_form_id == o.update_form_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [tag, sender, name, html_content, html_url, scheduled_at, subject, reply_to, to_field, recipients, attachment_url, inline_image_activation, mirror_active, recurring, footer, header, utm_campaign, params, send_at_best_time, ab_testing, subject_a, subject_b, split_rule, winner_criteria, winner_delay, ip_warmup_enable, initial_quota, increase_rate, unsubscription_page_id, update_form_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BrevoApiV3Sdk.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
