=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'spec_helper'
require 'json'

# Unit tests for Brevo::ProgramApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProgramApi' do
  before do
    # run before each test
    @instance = Brevo::ProgramApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProgramApi' do
    it 'should create an instance of ProgramApi' do
      expect(@instance).to be_instance_of(Brevo::ProgramApi)
    end
  end

  # unit tests for create_new_lp
  # Create loyalty program
  # Creates loyalty program
  # @param body Create Loyalty Program Payload
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyProgram]
  describe 'create_new_lp test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_members
  # Delete subscription member
  # Deletes member from a subscription
  # @param pid Loyalty Program Id
  # @param member_contact_ids Member Contact Ids
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_loyalty_program
  # Delete Loyalty Program
  # Deletes Loyalty Program
  # @param pid Loyalty Program Id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_loyalty_program test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_program_info
  # Get loyalty program Info
  # Returns loyalty program
  # @param pid Loyalty Program Id
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyProgram]
  describe 'get_loyalty_program_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_lp_list
  # Get loyalty program list
  # Returns list of loyalty programs
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of documents per page
  # @option opts [Integer] :offset Index of the first document in the page
  # @option opts [String] :sort_field Sort documents by field
  # @option opts [String] :sort Sort the documents in the ascending or descending order
  # @return [LoyaltyProgramPage]
  describe 'get_lp_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_parameter_subscription_info
  # Get Subscription Data
  # Get Information of balances, tiers, rewards and subscription members for a subscription
  # @param pid Loyalty Program Id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :contact_id Contact Id
  # @option opts [String] :params Filter List
  # @option opts [String] :loyalty_subscription_id Loyalty Subscription Id
  # @return [SubscriptionHandlerInfo]
  describe 'get_parameter_subscription_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for partially_update_loyalty_program
  # Partially update loyalty program
  # Partially updates loyalty program
  # @param pid Loyalty Program Id
  # @param body Loyalty Program Payload
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyProgram]
  describe 'partially_update_loyalty_program test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for publish_loyalty_program
  # Publish loyalty program
  # Publishes loyalty program
  # @param pid Loyalty Program Id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'publish_loyalty_program test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for subscribe_member_to_a_subscription
  # Create subscription member
  # Add member to a subscription
  # @param pid Loyalty Program Id
  # @param body Add Subscription Member Payload
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionMember]
  describe 'subscribe_member_to_a_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for subscribe_to_loyalty_program
  # Create subscription
  # Subscribes to a loyalty program
  # @param pid Loyalty Program Id
  # @param body Create Subscription Payload
  # @param [Hash] opts the optional parameters
  # @return [Subscription]
  describe 'subscribe_to_loyalty_program test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_loyalty_program
  # Update loyalty program
  # Updates loyalty program
  # @param pid Loyalty Program Id
  # @param body Update Loyalty Program Payload
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyProgram]
  describe 'update_loyalty_program test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
