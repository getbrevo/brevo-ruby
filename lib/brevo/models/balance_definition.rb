=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module Brevo
  class BalanceDefinition
    # startOfPeriod depicts the balancy expiry on start of day/week/month/year. endOfPeriod depicts the balancy expiry on end of day/week/month/year
    attr_accessor :balance_availability_duration_modifier

    # Unit of time for the balance's availability (e.g., day/week/month/year).
    attr_accessor :balance_availability_duration_unit

    # Number of days/weeks/month/year for balance expiry
    attr_accessor :balance_availability_duration_value

    # Date when the balance expires and can no longer be used, in dd/mm format. The balance will be expired when this date appears next in the calendar and only one of balanceExpirationDate or balance availability fields can be used.
    attr_accessor :balance_expiration_date

    # Partial enables partial credit of balance if maximum balance limit is reaching. Strict enables rejection of transaction if it will breach the max credit amount limit.
    attr_accessor :balance_option_amount_overtaking_strategy

    # Rounding strategy for credit transactions.
    attr_accessor :balance_option_credit_rounding

    # Rounding strategy for debit transactions.
    attr_accessor :balance_option_debit_rounding

    # Timestamp of balance definition creation.
    attr_accessor :created_at

    # Timestamp of balance definition deletion (nullable).
    attr_accessor :deleted_at

    # Short description of the balance definition.
    attr_accessor :description

    # Unique identifier for the balance definition.
    attr_accessor :id

    # Optional image reference URL.
    attr_accessor :image_ref

    # Maximum allowable balance.
    attr_accessor :max_amount

    # Max credit allowed per operation.
    attr_accessor :max_credit_amount_limit

    # Max debit allowed per operation.
    attr_accessor :max_debit_amount_limit

    # Additional metadata for the balance definition.
    attr_accessor :meta

    # Minimum allowable balance.
    attr_accessor :min_amount

    # Name of the balance definition.
    attr_accessor :name

    # Unit of balance (e.g., points, currency).
    attr_accessor :unit

    # Timestamp of the last update.
    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'balance_availability_duration_modifier' => :'balanceAvailabilityDurationModifier',
        :'balance_availability_duration_unit' => :'balanceAvailabilityDurationUnit',
        :'balance_availability_duration_value' => :'balanceAvailabilityDurationValue',
        :'balance_expiration_date' => :'balanceExpirationDate',
        :'balance_option_amount_overtaking_strategy' => :'balanceOptionAmountOvertakingStrategy',
        :'balance_option_credit_rounding' => :'balanceOptionCreditRounding',
        :'balance_option_debit_rounding' => :'balanceOptionDebitRounding',
        :'created_at' => :'createdAt',
        :'deleted_at' => :'deletedAt',
        :'description' => :'description',
        :'id' => :'id',
        :'image_ref' => :'imageRef',
        :'max_amount' => :'maxAmount',
        :'max_credit_amount_limit' => :'maxCreditAmountLimit',
        :'max_debit_amount_limit' => :'maxDebitAmountLimit',
        :'meta' => :'meta',
        :'min_amount' => :'minAmount',
        :'name' => :'name',
        :'unit' => :'unit',
        :'updated_at' => :'updatedAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'balance_availability_duration_modifier' => :'String',
        :'balance_availability_duration_unit' => :'String',
        :'balance_availability_duration_value' => :'Integer',
        :'balance_expiration_date' => :'DateTime',
        :'balance_option_amount_overtaking_strategy' => :'String',
        :'balance_option_credit_rounding' => :'String',
        :'balance_option_debit_rounding' => :'String',
        :'created_at' => :'DateTime',
        :'deleted_at' => :'String',
        :'description' => :'String',
        :'id' => :'String',
        :'image_ref' => :'String',
        :'max_amount' => :'Float',
        :'max_credit_amount_limit' => :'Float',
        :'max_debit_amount_limit' => :'Float',
        :'meta' => :'Hash<String, Object>',
        :'min_amount' => :'Float',
        :'name' => :'String',
        :'unit' => :'String',
        :'updated_at' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'balanceAvailabilityDurationModifier')
        self.balance_availability_duration_modifier = attributes[:'balanceAvailabilityDurationModifier']
      end

      if attributes.has_key?(:'balanceAvailabilityDurationUnit')
        self.balance_availability_duration_unit = attributes[:'balanceAvailabilityDurationUnit']
      end

      if attributes.has_key?(:'balanceAvailabilityDurationValue')
        self.balance_availability_duration_value = attributes[:'balanceAvailabilityDurationValue']
      end

      if attributes.has_key?(:'balanceExpirationDate')
        self.balance_expiration_date = attributes[:'balanceExpirationDate']
      end

      if attributes.has_key?(:'balanceOptionAmountOvertakingStrategy')
        self.balance_option_amount_overtaking_strategy = attributes[:'balanceOptionAmountOvertakingStrategy']
      end

      if attributes.has_key?(:'balanceOptionCreditRounding')
        self.balance_option_credit_rounding = attributes[:'balanceOptionCreditRounding']
      end

      if attributes.has_key?(:'balanceOptionDebitRounding')
        self.balance_option_debit_rounding = attributes[:'balanceOptionDebitRounding']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'deletedAt')
        self.deleted_at = attributes[:'deletedAt']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'imageRef')
        self.image_ref = attributes[:'imageRef']
      end

      if attributes.has_key?(:'maxAmount')
        self.max_amount = attributes[:'maxAmount']
      end

      if attributes.has_key?(:'maxCreditAmountLimit')
        self.max_credit_amount_limit = attributes[:'maxCreditAmountLimit']
      end

      if attributes.has_key?(:'maxDebitAmountLimit')
        self.max_debit_amount_limit = attributes[:'maxDebitAmountLimit']
      end

      if attributes.has_key?(:'meta')
        if (value = attributes[:'meta']).is_a?(Hash)
          self.meta = value
        end
      end

      if attributes.has_key?(:'minAmount')
        self.min_amount = attributes[:'minAmount']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      balance_availability_duration_modifier_validator = EnumAttributeValidator.new('String', ['startOfPeriod', 'endOfPeriod', 'noModification'])
      return false unless balance_availability_duration_modifier_validator.valid?(@balance_availability_duration_modifier)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_availability_duration_modifier Object to be assigned
    def balance_availability_duration_modifier=(balance_availability_duration_modifier)
      validator = EnumAttributeValidator.new('String', ['startOfPeriod', 'endOfPeriod', 'noModification'])
      unless validator.valid?(balance_availability_duration_modifier)
        fail ArgumentError, 'invalid value for "balance_availability_duration_modifier", must be one of #{validator.allowable_values}.'
      end
      @balance_availability_duration_modifier = balance_availability_duration_modifier
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          balance_availability_duration_modifier == o.balance_availability_duration_modifier &&
          balance_availability_duration_unit == o.balance_availability_duration_unit &&
          balance_availability_duration_value == o.balance_availability_duration_value &&
          balance_expiration_date == o.balance_expiration_date &&
          balance_option_amount_overtaking_strategy == o.balance_option_amount_overtaking_strategy &&
          balance_option_credit_rounding == o.balance_option_credit_rounding &&
          balance_option_debit_rounding == o.balance_option_debit_rounding &&
          created_at == o.created_at &&
          deleted_at == o.deleted_at &&
          description == o.description &&
          id == o.id &&
          image_ref == o.image_ref &&
          max_amount == o.max_amount &&
          max_credit_amount_limit == o.max_credit_amount_limit &&
          max_debit_amount_limit == o.max_debit_amount_limit &&
          meta == o.meta &&
          min_amount == o.min_amount &&
          name == o.name &&
          unit == o.unit &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [balance_availability_duration_modifier, balance_availability_duration_unit, balance_availability_duration_value, balance_expiration_date, balance_option_amount_overtaking_strategy, balance_option_credit_rounding, balance_option_debit_rounding, created_at, deleted_at, description, id, image_ref, max_amount, max_credit_amount_limit, max_debit_amount_limit, meta, min_amount, name, unit, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Brevo.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
