=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module Brevo
  class ProgramApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create loyalty program
    # Creates loyalty program
    # @param body Create Loyalty Program Payload
    # @param [Hash] opts the optional parameters
    # @return [LoyaltyProgram]
    def create_new_lp(body, opts = {})
      data, _status_code, _headers = create_new_lp_with_http_info(body, opts)
      data
    end

    # Create loyalty program
    # Creates loyalty program
    # @param body Create Loyalty Program Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoyaltyProgram, Fixnum, Hash)>] LoyaltyProgram data, response status code and response headers
    def create_new_lp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.create_new_lp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProgramApi.create_new_lp"
      end
      # resource path
      local_var_path = '/loyalty/config/programs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoyaltyProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#create_new_lp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete subscription member
    # Deletes member from a subscription
    # @param pid Loyalty Program Id
    # @param member_contact_ids Member Contact Ids
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_contact_members(pid, member_contact_ids, opts = {})
      delete_contact_members_with_http_info(pid, member_contact_ids, opts)
      nil
    end

    # Delete subscription member
    # Deletes member from a subscription
    # @param pid Loyalty Program Id
    # @param member_contact_ids Member Contact Ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contact_members_with_http_info(pid, member_contact_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.delete_contact_members ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.delete_contact_members"
      end
      # verify the required parameter 'member_contact_ids' is set
      if @api_client.config.client_side_validation && member_contact_ids.nil?
        fail ArgumentError, "Missing the required parameter 'member_contact_ids' when calling ProgramApi.delete_contact_members"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}/subscription-members'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}
      query_params[:'memberContactIds'] = member_contact_ids

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#delete_contact_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Loyalty Program
    # Deletes Loyalty Program
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_loyalty_program(pid, opts = {})
      delete_loyalty_program_with_http_info(pid, opts)
      nil
    end

    # Delete Loyalty Program
    # Deletes Loyalty Program
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_loyalty_program_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.delete_loyalty_program ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.delete_loyalty_program"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#delete_loyalty_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get loyalty program Info
    # Returns loyalty program
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [LoyaltyProgram]
    def get_loyalty_program_info(pid, opts = {})
      data, _status_code, _headers = get_loyalty_program_info_with_http_info(pid, opts)
      data
    end

    # Get loyalty program Info
    # Returns loyalty program
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoyaltyProgram, Fixnum, Hash)>] LoyaltyProgram data, response status code and response headers
    def get_loyalty_program_info_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.get_loyalty_program_info ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.get_loyalty_program_info"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoyaltyProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#get_loyalty_program_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get loyalty program list
    # Returns list of loyalty programs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of documents per page
    # @option opts [Integer] :offset Index of the first document in the page
    # @option opts [String] :sort_field Sort documents by field
    # @option opts [String] :sort Sort the documents in the ascending or descending order
    # @return [LoyaltyProgramPage]
    def get_lp_list(opts = {})
      data, _status_code, _headers = get_lp_list_with_http_info(opts)
      data
    end

    # Get loyalty program list
    # Returns list of loyalty programs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of documents per page
    # @option opts [Integer] :offset Index of the first document in the page
    # @option opts [String] :sort_field Sort documents by field
    # @option opts [String] :sort Sort the documents in the ascending or descending order
    # @return [Array<(LoyaltyProgramPage, Fixnum, Hash)>] LoyaltyProgramPage data, response status code and response headers
    def get_lp_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.get_lp_list ...'
      end
      if @api_client.config.client_side_validation && opts[:'sort_field'] && !['name', 'created_at', 'updated_at'].include?(opts[:'sort_field'])
        fail ArgumentError, 'invalid value for "sort_field", must be one of name, created_at, updated_at'
      end
      # resource path
      local_var_path = '/loyalty/config/programs'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_field'] = opts[:'sort_field'] if !opts[:'sort_field'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoyaltyProgramPage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#get_lp_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Subscription Data
    # Get Information of balances, tiers, rewards and subscription members for a subscription
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact_id Contact Id
    # @option opts [String] :params Filter List
    # @option opts [String] :loyalty_subscription_id Loyalty Subscription Id
    # @return [SubscriptionHandlerInfo]
    def get_parameter_subscription_info(pid, opts = {})
      data, _status_code, _headers = get_parameter_subscription_info_with_http_info(pid, opts)
      data
    end

    # Get Subscription Data
    # Get Information of balances, tiers, rewards and subscription members for a subscription
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact_id Contact Id
    # @option opts [String] :params Filter List
    # @option opts [String] :loyalty_subscription_id Loyalty Subscription Id
    # @return [Array<(SubscriptionHandlerInfo, Fixnum, Hash)>] SubscriptionHandlerInfo data, response status code and response headers
    def get_parameter_subscription_info_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.get_parameter_subscription_info ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.get_parameter_subscription_info"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}/account-info'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}
      query_params[:'contactId'] = opts[:'contact_id'] if !opts[:'contact_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'loyaltySubscriptionId'] = opts[:'loyalty_subscription_id'] if !opts[:'loyalty_subscription_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionHandlerInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#get_parameter_subscription_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Partially update loyalty program
    # Partially updates loyalty program
    # @param pid Loyalty Program Id
    # @param body Loyalty Program Payload
    # @param [Hash] opts the optional parameters
    # @return [LoyaltyProgram]
    def partially_update_loyalty_program(pid, body, opts = {})
      data, _status_code, _headers = partially_update_loyalty_program_with_http_info(pid, body, opts)
      data
    end

    # Partially update loyalty program
    # Partially updates loyalty program
    # @param pid Loyalty Program Id
    # @param body Loyalty Program Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoyaltyProgram, Fixnum, Hash)>] LoyaltyProgram data, response status code and response headers
    def partially_update_loyalty_program_with_http_info(pid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.partially_update_loyalty_program ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.partially_update_loyalty_program"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProgramApi.partially_update_loyalty_program"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoyaltyProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#partially_update_loyalty_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish loyalty program
    # Publishes loyalty program
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_loyalty_program(pid, opts = {})
      publish_loyalty_program_with_http_info(pid, opts)
      nil
    end

    # Publish loyalty program
    # Publishes loyalty program
    # @param pid Loyalty Program Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def publish_loyalty_program_with_http_info(pid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.publish_loyalty_program ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.publish_loyalty_program"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}/publish'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#publish_loyalty_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create subscription member
    # Add member to a subscription
    # @param pid Loyalty Program Id
    # @param body Add Subscription Member Payload
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionMember]
    def subscribe_member_to_a_subscription(pid, body, opts = {})
      data, _status_code, _headers = subscribe_member_to_a_subscription_with_http_info(pid, body, opts)
      data
    end

    # Create subscription member
    # Add member to a subscription
    # @param pid Loyalty Program Id
    # @param body Add Subscription Member Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionMember, Fixnum, Hash)>] SubscriptionMember data, response status code and response headers
    def subscribe_member_to_a_subscription_with_http_info(pid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.subscribe_member_to_a_subscription ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.subscribe_member_to_a_subscription"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProgramApi.subscribe_member_to_a_subscription"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}/subscription-members'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionMember')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#subscribe_member_to_a_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create subscription
    # Subscribes to a loyalty program
    # @param pid Loyalty Program Id
    # @param body Create Subscription Payload
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def subscribe_to_loyalty_program(pid, body, opts = {})
      data, _status_code, _headers = subscribe_to_loyalty_program_with_http_info(pid, body, opts)
      data
    end

    # Create subscription
    # Subscribes to a loyalty program
    # @param pid Loyalty Program Id
    # @param body Create Subscription Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def subscribe_to_loyalty_program_with_http_info(pid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.subscribe_to_loyalty_program ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.subscribe_to_loyalty_program"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProgramApi.subscribe_to_loyalty_program"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}/subscriptions'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#subscribe_to_loyalty_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update loyalty program
    # Updates loyalty program
    # @param pid Loyalty Program Id
    # @param body Update Loyalty Program Payload
    # @param [Hash] opts the optional parameters
    # @return [LoyaltyProgram]
    def update_loyalty_program(pid, body, opts = {})
      data, _status_code, _headers = update_loyalty_program_with_http_info(pid, body, opts)
      data
    end

    # Update loyalty program
    # Updates loyalty program
    # @param pid Loyalty Program Id
    # @param body Update Loyalty Program Payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoyaltyProgram, Fixnum, Hash)>] LoyaltyProgram data, response status code and response headers
    def update_loyalty_program_with_http_info(pid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramApi.update_loyalty_program ...'
      end
      # verify the required parameter 'pid' is set
      if @api_client.config.client_side_validation && pid.nil?
        fail ArgumentError, "Missing the required parameter 'pid' when calling ProgramApi.update_loyalty_program"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProgramApi.update_loyalty_program"
      end
      # resource path
      local_var_path = '/loyalty/config/programs/{pid}'.sub('{' + 'pid' + '}', pid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key', 'partner-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoyaltyProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramApi#update_loyalty_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
