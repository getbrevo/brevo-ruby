=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'spec_helper'
require 'json'

# Unit tests for Brevo::TierApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TierApi' do
  before do
    # run before each test
    @instance = Brevo::TierApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TierApi' do
    it 'should create an instance of TierApi' do
      expect(@instance).to be_instance_of(Brevo::TierApi)
    end
  end

  # unit tests for add_subscription_to_tier
  # Assign a tier
  # Manually assigns a tier to a specific membership.
  # @param pid Loyalty Program ID
  # @param cid Contact ID
  # @param tid Tier ID
  # @param [Hash] opts the optional parameters
  # @return [TierForContact]
  describe 'add_subscription_to_tier test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_tier_for_tier_group
  # Create a tier
  # Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
  # @param pid Loyalty Program ID
  # @param gid Tier group ID
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [Tier]
  describe 'create_tier_for_tier_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_tier_group
  # Create a tier group
  # Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
  # @param pid Loyalty Program ID
  # @param payload Tier group creation payload
  # @param [Hash] opts the optional parameters
  # @return [TierGroup]
  describe 'create_tier_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tier
  # Delete tier
  # Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
  # @param pid Loyalty Program ID
  # @param tid Tier ID
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'delete_tier test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tier_group
  # Delete tier group
  # Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
  # @param pid Loyalty Program ID
  # @param gid Tier group ID
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'delete_tier_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list_of_tier_groups
  # List tier groups
  # Returns the list of tier groups defined within the loyalty program.
  # @param pid Loyalty Program ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups.
  # @return [TierGroupPage]
  describe 'get_list_of_tier_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_program_tier
  # List tiers
  # Returns the list of tiers defined within the loyalty program.
  # @param pid Loyalty Program ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers.
  # @return [LoyaltyTierPage]
  describe 'get_loyalty_program_tier test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tier_group
  # Get tier group
  # Returns tier group information.
  # @param pid Loyalty Program ID
  # @param gid Tier group ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group.
  # @return [TierGroup]
  describe 'get_tier_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tier
  # Update tier
  # Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
  # @param pid Loyalty Program ID
  # @param tid Tier ID
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [Tier]
  describe 'update_tier test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tier_group
  # Update tier group
  # Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
  # @param pid Loyalty Program ID
  # @param gid Tier group ID
  # @param payload Tier group update payload
  # @param [Hash] opts the optional parameters
  # @return [TierGroup]
  describe 'update_tier_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
