=begin
#Brevo API

#Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

OpenAPI spec version: 3.0.0
Contact: contact@brevo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'spec_helper'
require 'json'

# Unit tests for BrevoApiV3Sdk::TransactionalEmailsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TransactionalEmailsApi' do
  before do
    # run before each test
    @instance = BrevoApiV3Sdk::TransactionalEmailsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TransactionalEmailsApi' do
    it 'should create an instance of TransactionalEmailsApi' do
      expect(@instance).to be_instance_of(BrevoApiV3Sdk::TransactionalEmailsApi)
    end
  end

  # unit tests for block_new_domain
  # Add a new domain to the list of blocked domains
  # Blocks a new domain in order to avoid messages being sent to the same
  # @param block_domain 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'block_new_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_smtp_template
  # Create an email template
  # @param smtp_template values to update in transactional email template
  # @param [Hash] opts the optional parameters
  # @return [CreateModel]
  describe 'create_smtp_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_blocked_domain
  # Unblock an existing domain from the list of blocked domains
  # Unblocks an existing domain from the list of blocked domains
  # @param domain The name of the domain to be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_blocked_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hardbounces
  # Delete hardbounces
  # Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)
  # @param [Hash] opts the optional parameters
  # @option opts [DeleteHardbounces] :delete_hardbounces values to delete hardbounces
  # @return [nil]
  describe 'delete_hardbounces test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_scheduled_email_by_id
  # Delete scheduled emails by batchId or messageId
  # Delete scheduled batch of emails by batchId or single scheduled email by messageId
  # @param identifier The &#x60;batchId&#x60; of scheduled emails batch (Should be a valid UUIDv4) or the &#x60;messageId&#x60; of scheduled email.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_scheduled_email_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_smtp_template
  # Delete an inactive email template
  # @param template_id id of the template
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_smtp_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregated_smtp_report
  # Get your transactional email activity aggregated over a period of time
  # This endpoint will show the aggregated stats for past 90 days by default if &#x60;startDate&#x60; and &#x60;endDate&#x60; OR &#x60;days&#x60; is not passed. The date range can not exceed 90 days
  # @param [Hash] opts the optional parameters
  # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
  # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
  # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
  # @option opts [String] :tag Tag of the emails
  # @return [GetAggregatedReport]
  describe 'get_aggregated_smtp_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_blocked_domains
  # Get the list of blocked domains
  # Get the list of blocked domains
  # @param [Hash] opts the optional parameters
  # @return [GetBlockedDomains]
  describe 'get_blocked_domains test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_event_report
  # Get all your transactional email activity (unaggregated events)
  # This endpoint will show the aggregated stats for past 30 days by default if &#x60;startDate&#x60; and &#x60;endDate&#x60; OR &#x60;days&#x60; is not passed. The date range can not exceed 90 days
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number limitation for the result returned
  # @option opts [Integer] :offset Beginning point in the list to retrieve from.
  # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
  # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
  # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
  # @option opts [String] :email Filter the report for a specific email addresses
  # @option opts [String] :event Filter the report for a specific event type
  # @option opts [String] :tags Filter the report for tags (serialized and urlencoded array)
  # @option opts [String] :message_id Filter on a specific message id
  # @option opts [Integer] :template_id Filter on a specific template id
  # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
  # @return [GetEmailEventReport]
  describe 'get_email_event_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_scheduled_email_by_batch_id
  # Fetch scheduled emails by batchId
  # Fetch scheduled batch of emails by batchId (Can retrieve data upto 30 days old)
  # @param batch_id The batchId of scheduled emails batch (Should be a valid UUIDv4)
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :start_date Mandatory if &#x60;endDate&#x60; is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.
  # @option opts [Date] :end_date Mandatory if &#x60;startDate&#x60; is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
  # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
  # @option opts [String] :status Filter the records by &#x60;status&#x60; of the scheduled email batch or message.
  # @option opts [Integer] :limit Number of documents returned per page
  # @option opts [Integer] :offset Index of the first document on the page
  # @return [GetScheduledEmailByBatchId]
  describe 'get_scheduled_email_by_batch_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_scheduled_email_by_message_id
  # Fetch scheduled email by messageId
  # Fetch scheduled email by messageId (Can retrieve data upto 30 days old)
  # @param message_id The messageId of scheduled email
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.
  # @option opts [Date] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
  # @return [GetScheduledEmailByMessageId]
  describe 'get_scheduled_email_by_message_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_smtp_report
  # Get your transactional email activity aggregated per day
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of documents returned per page
  # @option opts [Integer] :offset Index of the first document on the page
  # @option opts [String] :start_date Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)
  # @option opts [String] :end_date Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)
  # @option opts [Integer] :days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
  # @option opts [String] :tag Tag of the emails
  # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
  # @return [GetReports]
  describe 'get_smtp_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_smtp_template
  # Returns the template information
  # @param template_id id of the template
  # @param [Hash] opts the optional parameters
  # @return [GetSmtpTemplateOverview]
  describe 'get_smtp_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_smtp_templates
  # Get the list of email templates
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :template_status Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false
  # @option opts [Integer] :limit Number of documents returned per page
  # @option opts [Integer] :offset Index of the first document in the page
  # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
  # @return [GetSmtpTemplates]
  describe 'get_smtp_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transac_blocked_contacts
  # Get the list of blocked or unsubscribed transactional contacts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts
  # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts
  # @option opts [Integer] :limit Number of documents returned per page
  # @option opts [Integer] :offset Index of the first document on the page
  # @option opts [Array<String>] :senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed
  # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
  # @return [GetTransacBlockedContacts]
  describe 'get_transac_blocked_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transac_email_content
  # Get the personalized content of a sent transactional email
  # @param uuid Unique id of the transactional email that has been sent to a particular contact
  # @param [Hash] opts the optional parameters
  # @return [GetTransacEmailContent]
  describe 'get_transac_email_content test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transac_emails_list
  # Get the list of transactional emails on the basis of allowed filters
  # This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.
  # @option opts [Integer] :template_id Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.
  # @option opts [String] :message_id Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.
  # @option opts [String] :start_date Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.
  # @option opts [String] :end_date Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
  # @option opts [String] :sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
  # @option opts [Integer] :limit Number of documents returned per page
  # @option opts [Integer] :offset Index of the first document in the page
  # @return [GetTransacEmailsList]
  describe 'get_transac_emails_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_test_template
  # Send a template to your test list
  # @param template_id Id of the template
  # @param send_test_email 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'send_test_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_transac_email
  # Send a transactional email
  # @param send_smtp_email Values to send a transactional email
  # @param [Hash] opts the optional parameters
  # @return [CreateSmtpEmail]
  describe 'send_transac_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for smtp_blocked_contacts_email_delete
  # Unblock or resubscribe a transactional contact
  # @param email contact email (urlencoded) to unblock.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'smtp_blocked_contacts_email_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for smtp_log_message_id_delete
  # Delete an SMTP transactional log
  # @param message_id MessageId of the transactional log to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'smtp_log_message_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_smtp_template
  # Update an email template
  # @param template_id id of the template
  # @param smtp_template values to update in transactional email template
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_smtp_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
